(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{470:function(t,a,e){"use strict";e.r(a);var l=e(4),n=Object(l.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"事务传播行为类型说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务传播行为类型说明"}},[t._v("#")]),t._v(" 事务传播行为类型\t说明")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("TYPE")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("DESC")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PROPAGATION_REQUIRED")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PROPAGATION_SUPPORTS")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("支持当前事务，如果当前没有事务，就以非事务方式执行。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PROPAGATION_MANDATORY")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("使用当前的事务，如果当前没有事务，就抛出异常。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PROPAGATION_REQUIRES_NEW")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("新建事务，如果当前存在事务，把当前事务挂起。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PROPAGATION_NOT_SUPPORTED")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PROPAGATION_NEVER")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("以非事务方式执行，如果当前存在事务，则抛出异常。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("PROPAGATION_NESTED")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。")])])])]),t._v(" "),e("h2",{attrs:{id:"事务的四种隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事务的四种隔离级别"}},[t._v("#")]),t._v(" 事务的四种隔离级别")]),t._v(" "),e("h3",{attrs:{id:"_1、事务的四大特性（acid）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、事务的四大特性（acid）"}},[t._v("#")]),t._v(" 1、事务的四大特性（ACID）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("原子性\n操作要么全部成功，要么全部失败回滚。\n\n一致性\n事务执行前和执行后处于一致性状态。例如，转账前A、B共5000元，A、B之间转账后，两者之和仍应该是5000元。\n\n隔离性\n事务之间互不干扰。\n\n持久性\n事务一旦提交，数据的改变是永久性的，即使这时候数据库发生故障，数据也不会丢失。\n")])])]),e("h3",{attrs:{id:"_2、与事务隔离级别的相关问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、与事务隔离级别的相关问题"}},[t._v("#")]),t._v(" 2、与事务隔离级别的相关问题")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("脏读\nA事务对一条记录进行修改，尚未提交，B事务已经看到了A的修改结果。若A发生回滚，B读到的数据就是错误的，这就是脏读。\n\n不可重复读\nA事务对一条记录进行修改，尚未提交，B事务第一次查询该记录，看到的是修改之后的结果，此时A发生回滚，B事务又一次查询该记录，看到的是回滚后的结果。同一个事务内，B两次查询结果不一致，这就是不可重复读。\n\n幻读\nA事务对所有记录进行修改，尚未提交，此时B事务创建了一条新记录，A、B都提交。A查看所有数据，发现有一条数据没有被修改，因为这是B事务新增的，就想看到了幻象一样，这就是幻读。\n")])])]),e("h3",{attrs:{id:"_3、事务的隔离级别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、事务的隔离级别"}},[t._v("#")]),t._v(" 3、事务的隔离级别")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("读未提交（read uncommitted）\n事务尚未提交，其他事务即可以看到该事务的修改结果。隔离级别最差，脏读、不可重复读、幻读都不能避免。\n\n读提交（read committed）\n事务只能看到其他事务提交之后的数据。可避免脏读，不可重复读、幻读无法避免。\n不可重复读原因：A事务修改，B事务查询，A提交前和提交后，B事务看到的数据是不一致的。\n幻读原因：A事务修改，B事务新增，B事务提交前，A事务已经提交。B事务提交后，A发现仍有数据未修改。\n\n可重复读（repeatable read）-------innodb默认隔离级别\n一个事务多次查询，无论其他事务对数据如何修改，看到的数据都是一致的。因为A事务查询数据时，若B同时在修改数据，A事务看到的永远是B事务执行前的数据。只有当A提交或者回滚之后，看到的才是最新的被B修改知乎的数据。可避免脏读、不可重复读，幻读无法避免。\n\n序列化（serializable）\n事务顺序执行，可避免脏读、不可重复读、幻读，但效率最差。因为A事务执行时，其他事务必须等待。\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);